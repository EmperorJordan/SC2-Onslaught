//==================================================================================================
//
// <SC2 - Onslaught> TriggerActions
//
// Name:  <SC2 - Onslaught>
// Author: <Jordan Johns>
//
//==================================================================================================

include "TriggerLibs/NativeLib"
include "Globals.galaxy"

// Triggers
trigger gt_SetupGame;
trigger gt_ResourceVote;
trigger gt_VoteComplete;

trigger gt_TopMidControlGain;
trigger gt_TopMidControlLoss;

trigger gt_TopRightControlGain;
trigger gt_TopRightControlLoss;

trigger gt_MidControlGain;
trigger gt_MidControlLoss;

trigger gt_BottomMidControlGain;
trigger gt_BottomMidControlLoss;

trigger gt_BottomLeftControlGain;
trigger gt_BottomLeftControlLoss;


//--------------------------------------------------------------------------------------------------
// Triggers: Initialization
//--------------------------------------------------------------------------------------------------

void gt_SetupGame_init()
{
	gt_SetupGame = TriggerCreate("gt_SetupGame_Func");
    TriggerAddEventMapInit(gt_SetupGame);
}

void gt_ResourceVote_init()
{
	gt_ResourceVote = TriggerCreate("gt_ResourceVote_Func");
	// Trigger will fire each time a vote is made.
	TriggerAddEventDialogControl(gt_ResourceVote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void gt_VoteComplete_init()
{
	gt_VoteComplete = TriggerCreate("gt_VoteComplete_Func");
	TriggerAddEventGeneric(gt_VoteComplete, "Vote Complete");
}

void gt_TopMidControlGain_init()
{
	gt_TopMidControlGain = TriggerCreate("gt_TopMidControlGain_Func");
	TriggerAddEventUnitRegion(gt_TopMidControlGain, null, gv_TopMid, true);
}

void gt_TopMidControlLoss_init()
{
	gt_TopMidControlLoss = TriggerCreate("gt_TopMidControlLoss_Func");
	TriggerAddEventUnitRegion(gt_TopMidControlLoss, null, gv_TopMid, false);
}

void gt_TopRightControlGain_init()
{
	gt_TopRightControlGain = TriggerCreate("gt_TopRightControlGain_Func");
	TriggerAddEventUnitRegion(gt_TopRightControlGain, null, gv_TopRight, true);
}

void gt_TopRightControlLoss_init()
{
	gt_TopRightControlLoss = TriggerCreate("gt_TopRightControlLoss_Func");
	TriggerAddEventUnitRegion(gt_TopRightControlLoss, null, gv_TopRight, false);
}

void gt_MidControlGain_init()
{
	gt_MidControlGain = TriggerCreate("gt_MidControlGain_Func");
	TriggerAddEventUnitRegion(gt_MidControlGain, null, gv_Mid, true);
}

void gt_MidControlLoss_init()
{
	gt_MidControlLoss = TriggerCreate("gt_MidControlLoss_Func");
	TriggerAddEventUnitRegion(gt_MidControlLoss, null, gv_Mid, false);
}

void gt_BottomMidControlGain_init()
{
	gt_BottomMidControlGain = TriggerCreate("gt_BottomMidControlGain_Func");
	TriggerAddEventUnitRegion(gt_BottomMidControlGain, null, gv_BottomMid, true);
}

void gt_BottomMidControlLoss_init()
{
	gt_BottomMidControlLoss = TriggerCreate("gt_BottomMidControlLoss_Func");
	TriggerAddEventUnitRegion(gt_BottomMidControlLoss, null, gv_BottomMid, false);
}

void gt_BottomLeftControlGain_init()
{
	gt_BottomLeftControlGain = TriggerCreate("gt_BottomLeftControlGain_Func");
	TriggerAddEventUnitRegion(gt_BottomLeftControlGain, null, gv_BottomLeft, true);
}

void gt_BottomLeftControlLoss_init()
{
	gt_BottomLeftControlLoss = TriggerCreate("gt_BottomLeftControlLoss_Func");
	TriggerAddEventUnitRegion(gt_BottomLeftControlLoss, null, gv_BottomLeft, false);
}

//--------------------------------------------------------------------------------------------------
// Triggers: Actions
//--------------------------------------------------------------------------------------------------

bool gt_SetupGame_Func(bool testConds, bool runActions)
{
	// False means DONT show it... counter intuitive.
	libNtve_gf_HideGameUI(false, PlayerGroupAll());
	
	//Wait(5.0, c_timeReal);
	
	// True means SHOW the ui... counter intuitive.
	//libNtve_gf_HideGameUI(true, PlayerGroupAll());
	
	Wait(5.0, c_timeReal);
	
	// Show the resource vote dialog.
	//DialogControlSetVisible(gv_ResourceVoteDialog, PlayerGroupAll(), true); <---- DIALOG CONTROL is for the ITEMS not the DIALOG!
	DialogSetVisible(gv_ResourceVoteDialog, PlayerGroupAll(), true);
	
	
	return true;
}

bool gt_ResourceVote_Func(bool testConds, bool runActions)
{	
	// Get the last used dialog (the one that was just used to trigger the event).
	int dialogItemUsed = EventDialogControl();
	
	// Get the player that used the dialog.
	int triggeringPlayer = EventPlayer();
	int i;
	
	// Recession Vote.
	if (dialogItemUsed == gv_ResourceVoteButtons[0])
	{
		gv_ResourceVoteTally[0] = gv_ResourceVoteTally[0] + 1;
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Player [" + IntToString(triggeringPlayer) + "] voted for [Recession]"));
	}
	// Standard Vote.
	else if (dialogItemUsed == gv_ResourceVoteButtons[1])
	{
		gv_ResourceVoteTally[1] = gv_ResourceVoteTally[1] + 1;
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Player [" + IntToString(triggeringPlayer) + "] voted for [Standard]"));
	}
	// Stimulus Vote.
	else if (dialogItemUsed == gv_ResourceVoteButtons[2])
	{
		gv_ResourceVoteTally[2] = gv_ResourceVoteTally[2] + 1;
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Player [" + IntToString(triggeringPlayer) + "] voted for [Stimulus Package]"));
	}
	// Something stupid was clicked... fail.
	else
	{
		return false;
	}
	
	// Disable the voting buttons once a player has made a vote.
	for (i = 0; i < 3; i = i + 1)
	{
		DialogControlSetEnabled(gv_ResourceVoteButtons[i], PlayerGroupSingle(triggeringPlayer), false);
	}
	
	// Check if everyone has voted, if so end the vote by firing off the "Vote Complete" event.
	if (gv_ResourceVoteTally[0] + gv_ResourceVoteTally[1] + gv_ResourceVoteTally[2] >= gv_numPlayers)
	{
		TriggerSendEvent("Vote Complete");
	}
	
	return true;
}

bool gt_VoteComplete_Func(bool testConds, bool runActions)
{
	int i;
	int player;
	UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Vote Complete ==="));
	
	// Tally up the votes, determine the game mode.
	if (gv_ResourceVoteTally[0] > gv_ResourceVoteTally[1] && gv_ResourceVoteTally[0] > gv_ResourceVoteTally[2])
	{
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Recession Mode ==="));
		gv_RecessionMode = true;
	}
	else if (gv_ResourceVoteTally[1] > gv_ResourceVoteTally[0] && gv_ResourceVoteTally[1] > gv_ResourceVoteTally[2])
	{
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Standard Mode ==="));
		gv_StandardMode = true;
	}
	else if (gv_ResourceVoteTally[2] > gv_ResourceVoteTally[0] && gv_ResourceVoteTally[2] > gv_ResourceVoteTally[1])
	{
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Stimulus Mode ==="));
		gv_StimulusMode = true;
	}
	
	Wait(3.0, c_timeReal);
	
	// Destroy voting dialog, since it is no longer of use.
	DialogDestroyAll();
	
	Wait(2.0, c_timeReal);
	
	// Show the game UI now that voting is done.
	libNtve_gf_HideGameUI(true, PlayerGroupAll());
	
	// Give players starting resources based on the vote outcome.
	for (i = 1; i <= PlayerGroupCount(PlayerGroupActive()); i = i + 1)
	{
		// Retrieve the player at index "i" in active players.
		player = PlayerGroupPlayer(PlayerGroupActive(), i);
		
		UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Player resource modification: " + IntToString(player)));
		
		if (gv_RecessionMode == true)
		{
			UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Set 0 ==="));
			PlayerModifyPropertyInt(player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
		}
		else if (gv_StandardMode == true)
		{
			UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Set 50 ==="));
			PlayerModifyPropertyInt(player, c_playerPropMinerals, c_playerPropOperSetTo, 50);
		}
		else if (gv_StimulusMode == true)
		{
			UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("=== Set 400 ==="));
			PlayerModifyPropertyInt(player, c_playerPropMinerals, c_playerPropOperSetTo, 400);
		}
	}
	
	return true;
}

bool gt_TopMidControlGain_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_TopMidLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_TopMidLock = true;
	UnitGroupAdd(gv_TopMidUnits, EventUnit());
	gv_TopMidLock = false;
	
	return true;
}

bool gt_TopMidControlLoss_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_TopMidLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_TopMidLock = true;
	UnitGroupRemove(gv_TopMidUnits, EventUnit());
	gv_TopMidLock = false;
	
	return true;
}

bool gt_TopRightControlGain_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_TopRightLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_TopRightLock = true;
	UnitGroupAdd(gv_TopRightUnits, EventUnit());
	gv_TopRightLock = false;
	
	return true;
}

bool gt_TopRightControlLoss_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_TopRightLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_TopRightLock = true;
	UnitGroupRemove(gv_TopRightUnits, EventUnit());
	gv_TopRightLock = false;
	
	return true;
}

bool gt_MidControlGain_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_MidLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_MidLock = true;
	UnitGroupAdd(gv_MidUnits, EventUnit());
	gv_MidLock = false;
	
	return true;
}

bool gt_MidControlLoss_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_MidLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_MidLock = true;
	UnitGroupRemove(gv_MidUnits, EventUnit());
	gv_MidLock = false;
	
	return true;
}

bool gt_BottomMidControlGain_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_BottomMidLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_BottomMidLock = true;
	UnitGroupAdd(gv_BottomMidUnits, EventUnit());
	gv_BottomMidLock = false;
	
	return true;
}

bool gt_BottomMidControlLoss_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_BottomMidLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_BottomMidLock = true;
	UnitGroupRemove(gv_BottomMidUnits, EventUnit());
	gv_BottomMidLock = false;
	
	return true;
}

bool gt_BottomLeftControlGain_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_BottomLeftLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_BottomLeftLock = true;
	UnitGroupAdd(gv_BottomLeftUnits, EventUnit());
	gv_BottomLeftLock = false;
	
	return true;
}

bool gt_BottomLeftControlLoss_Func(bool testConds, bool runActions)
{
	// Prevent modification to unit group until lock released. (Spin until unlocked)
	while (gv_BottomLeftLock)
	{
		Wait(1.0, c_timeGame);
	}
	
	gv_BottomLeftLock = true;
	UnitGroupRemove(gv_BottomLeftUnits, EventUnit());
	gv_BottomLeftLock = false;
	
	return true;
}